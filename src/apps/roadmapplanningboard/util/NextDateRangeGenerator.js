(function () {
    var Ext = window.Ext4 || window.Ext;

    /**
     * This class provides methods to help with generating new start and end dates for timeframes. Timeframe ranges
     * are generated by making a best guess to a cadence of provided date ranges. The supported cadences are either
     * quarters or a series of weeks (ex: 10 weeks)
     */
    Ext.define('Rally.apps.roadmapplanningboard.util.NextDateRangeGenerator', {

        singleton: true,

        quarters: [
            { start: '01-01', end: '03-31' },
            { start: '04-01', end: '06-30' },
            { start: '07-01', end: '09-30' },
            { start: '10-01', end: '12-31' }
        ],
        format: 'Y-m-d',

        /**
         * Generate the next start date given an end date.
         * @param {Ext.Date} endDate
         * @returns {Ext.Date} The next start date
         */
        getNextStartDate: function (endDate) {
            if (!endDate) {
                return Ext.Date.parse(this.getQuarter(Ext.Date.now()).start, this.format);
            }
            return Ext.Date.add(endDate, Ext.Date.DAY, 1);
        },

        /**
         * Generate the next end date given start and end dates. This method will try to guess if the given date range
         * is a span of a quarter or weeks
         * @param {Ext.Date} startDate
         * @param {Ext.Date} endDate
         * @returns {Ext.Date} The next end date
         */
        getNextEndDate: function (startDate, endDate) {
            var nextEndDate;
            var nextStartDate = this.getNextStartDate(endDate);

            if (!endDate) {
                var now = Ext.Date.now();
                nextEndDate = Ext.Date.parse(this.getQuarter(now).end, this.format);
            } else {
                var days = this.getDaysBetween(startDate, endDate);

                // Determine if the end date should be a weekish cadence or end on a quarter
                if (this.isQuarter(startDate, endDate) || !this.isWeeks(days)) {
                    nextEndDate = Ext.Date.parse(this.getQuarter(nextStartDate).end, this.format);
                } else {
                    nextEndDate = Ext.Date.add(endDate, Ext.Date.DAY, days+1);
                }
            }

            // Move the time to 23:59:59 of the end date
            return Ext.Date.add(Ext.Date.add(Ext.Date.add(nextEndDate, Ext.Date.DAY, 1), Ext.Date.SECOND, -1), Ext.Date.MINUTE, -nextEndDate.getTimezoneOffset());
        },

        /**
         * Test if the start and end date are the bounds of a quarter
         * @param startDate
         * @param endDate
         * @returns {boolean}
         */
        isQuarter: function (startDate, endDate) {
            var index = _.findIndex(this.quarters, function (quarter) {
                return Ext.Date.format(startDate, 'm-d') === quarter.start && Ext.Date.format(endDate, 'm-d') === quarter.end;
            }, this);

            return index >= 0;
        },


        /**
         * @param {Number} days The number of days between 2 dates
         * @returns {boolean}
         */
        isWeeks: function (days) {
            if (days === 0 || ((days + 1) % 7)) {
                return false;
            }
            return true;
        },

        /**
         * Get the number of days between 2 dates. The dates must sampled from the same time (ex: midnight)
         * @param {Date} start The start date
         * @param {Date} end The end date
         * @returns {number} The days between 2 dates
         */
        getDaysBetween: function(startDate, endDate) {
            return (endDate  - startDate) / 86400000; // milliseconds in a day
        },

        /**
         * Get the quarter in the {Rally.apps.roadmapplanningboard.TimeframeCreator.quarters} array that the input date
         * falls between
         * @param {Date} date The date to pick a quarter from
         * @returns {Object} Quarter object with start and end
         */
        getQuarter: function (date) {
            var dateStr = Ext.Date.format(date, 'm-d');
            var year = Ext.Date.format(date, 'Y');
            var quarter = _.find(this.quarters, function (quarter) {
                return dateStr >= quarter.start && dateStr <= quarter.end;
            });

            return {
                start: year + '-' + quarter.start,
                end: year + '-' + quarter.end
            };
        }
    });

})();
